package ru.logist.sbat.testUtils.routesDataInserter;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import ru.logist.sbat.db.DBManager;
import ru.logist.sbat.resourcesInit.SystemResourcesContainer;
import ru.logist.sbat.resourcesInit.ResourceInitException;
import ru.logist.sbat.resourcesInit.PropertiesPojo;

import java.io.*;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.sql.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

public class App {
    private static final Logger logger = LogManager.getLogger();
    private static SimpleDateFormat format = new SimpleDateFormat("HH:mm:ss");
    private static SystemResourcesContainer systemResourcesContainer;

    public static void main(String[] args) throws ParseException, SQLException, IOException, ResourceInitException {

        //1) get connection to database
        Properties inserterProperties = new Properties();
        DBManager DBManager = null;
        try {
            inserterProperties.loadFromXML(App.class.getResourceAsStream("inserter.property"));
            systemResourcesContainer = new SystemResourcesContainer(new PropertiesPojo(inserterProperties), logger);

            DBManager = new DBManager(systemResourcesContainer.getConnection());

            DBManager.truncatePublicTables();

            System.out.println("connection received");
        } catch (IOException e) {
            e.printStackTrace();
        }

        // 2) insert into points from csv
        // parse csv

        try {
            URL resource = App.class.getResource("points.csv");
            InputStream inputStream = resource.openStream();
            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream, StandardCharsets.UTF_8));
            String line = "";

            PreparedStatement pointsStatement = systemResourcesContainer.getConnection().prepareStatement(
                    "INSERT INTO points VALUE (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
            );

            while ((line = bufferedReader.readLine()) != null) {
                // use comma as separator

                char[] chars = line.toCharArray();
                List<Integer> indexes = new ArrayList<>();
                boolean isContinue = false;
                for (int i = 0; i < chars.length; i++) {
                    if (chars[i] == '\"') isContinue = !isContinue;
                    if (isContinue) continue;
                    if (chars[i] == ',') indexes.add(i);
                }

                String[] dataFromString = new String[18];
                int lastIndex = indexes.size() - 1;
                for (int i = 0; i <= lastIndex; i++) {
                    if (i == 0) {
                        dataFromString[0] = line.substring(0, indexes.get(i));
                        dataFromString[1] = line.substring(indexes.get(i) + 1, indexes.get(i + 1));
                    } else if (i == lastIndex) {
                        dataFromString[17] = line.substring(indexes.get(i) + 1, chars.length);
                        break;
                    } else
                        dataFromString[i + 1] = line.substring(indexes.get(i) + 1, indexes.get(i + 1));
                }

                Point point = new Point();
                int pointId = (dataFromString[0] == null || dataFromString[0].equals("\\N")) ? 0 : Integer.parseInt(dataFromString[0]);
                point.setPointID(pointId);
                point.setPointIDExternal(dataFromString[1]);
                point.setDataSourceID(dataFromString[2]);
                point.setPointName(dataFromString[3]);
                point.setRegion(dataFromString[4]);
                int timeZone = (dataFromString[5] == null || dataFromString[5].equals("\\N")) ? 0 : Integer.parseInt(dataFromString[5]);
                point.setTimeZone(timeZone);
                int docs = (dataFromString[6] == null || dataFromString[6].equals("\\N")) ? 0 : Integer.parseInt(dataFromString[6]);
                point.setDocs(docs);
                point.setComments(dataFromString[7]);
                Time openTime = (dataFromString[8] == null || dataFromString[8].equals("\\N")) ? null : new Time(format.parse(dataFromString[8]).getTime());
                point.setOpenTime(openTime);
                Time closeTime = (dataFromString[9] == null || dataFromString[9].equals("\\N")) ? null : new Time(format.parse(dataFromString[9]).getTime());
                point.setCloseTime(closeTime);
                point.setDistrict(dataFromString[10]);
                point.setLocality(dataFromString[11]);
                point.setMailIndex(dataFromString[12]);
                point.setAddress(dataFromString[13]);
                point.setEmail(dataFromString[14]);
                point.setPhoneNumber(dataFromString[15]);
                point.setResponsiblePersonId(dataFromString[16]);
                point.setPointTypeId(dataFromString[17]);

                pointsStatement.setInt(1, point.getPointID());
                pointsStatement.setString(2, point.getPointIDExternal());
                pointsStatement.setString(3, point.getDataSourceID());
                pointsStatement.setString(4, point.getPointName());
                pointsStatement.setString(5, point.getRegion());
                pointsStatement.setInt(6, point.getTimeZone());
                pointsStatement.setInt(7, point.getDocs());
                pointsStatement.setString(8, point.getComments());
                pointsStatement.setTime(9, point.getOpenTime());
                pointsStatement.setTime(10, point.getCloseTime());
                pointsStatement.setString(11, point.getDistrict());
                pointsStatement.setString(12, point.getLocality());
                pointsStatement.setString(13, point.getMailIndex());
                pointsStatement.setString(14, point.getAddress());
                pointsStatement.setString(15, point.getEmail());
                pointsStatement.setString(16, point.getPhoneNumber());
                pointsStatement.setString(17, point.getResponsiblePersonId());
                pointsStatement.setString(18, point.getPointTypeId());
                pointsStatement.addBatch();
            }
            System.out.println("start execute batch points");
            int[] ints = pointsStatement.executeBatch();
            System.out.println("affected rous count = " + ints.length);
            systemResourcesContainer.getConnection().commit();
            pointsStatement.close();

            bufferedReader.close();
        } catch (IOException e) {
            e.printStackTrace();
        }


//         3) insert into routes from csv
        try {
            URL resource2 = App.class.getResource("routes.csv");
            InputStream inputStream2 = resource2.openStream();
            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream2, StandardCharsets.UTF_8));
            String line = "";
            PreparedStatement routesStatement = systemResourcesContainer.getConnection().prepareStatement(
                    "INSERT INTO routes VALUE (?, ?, ?, ?, ?, ?, ?)");
            while ((line = bufferedReader.readLine()) != null) {
                // use comma as separator

                char[] chars = line.toCharArray();
                List<Integer> indexes = new ArrayList<>();
                boolean isContinue = false;
                for (int i = 0; i < chars.length; i++) {
                    if (chars[i] == '\"') isContinue = !isContinue;
                    if (isContinue) continue;
                    if (chars[i] == ',') indexes.add(i);
                }

                String[] dataFromString = new String[7];
                int lastIndex = indexes.size() - 1;
                for (int i = 0; i <= lastIndex; i++) {
                    if (i == 0) {
                        dataFromString[0] = line.substring(0, indexes.get(i)).replaceAll("\"", "");
                        dataFromString[1] = line.substring(indexes.get(i) + 1, indexes.get(i + 1)).replaceAll("\"", "");
                    } else if (i == lastIndex) {
                        dataFromString[6] = line.substring(indexes.get(i) + 1, chars.length).replaceAll("\"", "");
                        break;
                    } else
                        dataFromString[i + 1] = line.substring(indexes.get(i) + 1, indexes.get(i + 1)).replaceAll("\"", "");
                }

                Route route = new Route();
                int routeId = (dataFromString[0] == null || dataFromString[0].equals("\\N")) ? 0 : Integer.parseInt(dataFromString[0]);
                route.setRouteID(routeId);
                route.setDirectionIDExternal(dataFromString[1]);
                route.setDataSourceID(dataFromString[2]);
                route.setRouteName(dataFromString[3]);
                Time firstPointArrivalTime = (dataFromString[4] == null || dataFromString[4].equals("\\N")) ? null : new Time(format.parse(dataFromString[4]).getTime());
                route.setFirstPointArrivalTime(firstPointArrivalTime);
                route.setDayOfWeek(dataFromString[5]);
                int tariffID = (dataFromString[6] == null || dataFromString[6].equals("\\N")) ? 0 : Integer.parseInt(dataFromString[6]);
                route.setTariffID(tariffID);

                routesStatement.setInt(1, route.getRouteID());
                routesStatement.setString(2, route.getDirectionIDExternal());
                routesStatement.setString(3, route.getDataSourceID());
                routesStatement.setString(4, route.getRouteName());
                routesStatement.setTime(5, route.getFirstPointArrivalTime());
                routesStatement.setString(6, route.getDayOfWeek());
                routesStatement.setNull(7, Types.INTEGER);
                routesStatement.addBatch();
            }

            System.out.println("start execute batch routes");
            int[] ints = routesStatement.executeBatch();
            System.out.println("affected routes count = " + ints.length);
            systemResourcesContainer.getConnection().commit();
            routesStatement.close();

            bufferedReader.close();
        }catch (IOException e) {
            e.printStackTrace();
        }

        Statement routePointsStatement = systemResourcesContainer.getConnection().createStatement();
        routePointsStatement.execute("INSERT INTO route_points (sortOrder, timeForLoadingOperations, pointID, routeID) VALUES (1, 60, 1, 38), (1, 60, 1, 39), (1, 60, 1, 40), (1, 60, 1, 41), (1, 60, 1, 42), (1, 60, 1, 45), (1, 60, 1, 46), (1, 60, 1, 47), (1, 60, 1, 48), (1, 60, 3, 60), (1, 60, 3, 61), (1, 60, 1, 62), (1, 60, 3, 63), (1, 60, 3, 65), (1, 60, 3, 67), (1, 60, 3, 69), (1, 60, 3, 70), (1, 60, 3, 71), (1, 60, 3, 72), (1, 60, 3, 74), (1, 60, 3, 75), (1, 60, 3, 76), (1, 60, 3, 77), (1, 60, 3, 78), (1, 60, 3, 79), (1, 60, 3, 80), (1, 60, 3, 81), (1, 60, 3, 82), (1, 60, 36, 87), (1, 60, 36, 88), (1, 60, 36, 89), (1, 60, 36, 90), (1, 60, 36, 91), (1, 60, 36, 103), (1, 60, 36, 106), (1, 60, 15, 158), (1, 60, 30, 186), (1, 60, 15, 192), (1, 60, 15, 205), (1, 60, 15, 206), (1, 60, 32, 214), (1, 60, 15, 218), (1, 60, 15, 219), (1, 60, 15, 224), (1, 60, 15, 244), (1, 60, 15, 251), (1, 60, 37, 276), (1, 60, 15, 278), (1, 60, 37, 283), (1, 60, 37, 284), (1, 60, 37, 286), (1, 60, 15, 291), (1, 60, 15, 304), (1, 60, 38, 319), (1, 60, 15, 320), (1, 60, 15, 321), (1, 60, 15, 327), (1, 60, 15, 341), (1, 60, 15, 342), (1, 60, 28, 351), (1, 60, 28, 354), (1, 60, 15, 356), (1, 60, 15, 363), (1, 60, 15, 370), (1, 60, 78, 412), (1, 60, 78, 413), (1, 60, 78, 416), (1, 60, 78, 419), (1, 60, 15, 420), (1, 60, 78, 421), (1, 60, 78, 423), (1, 60, 78, 424), (1, 60, 78, 425), (1, 60, 15, 426), (1, 60, 78, 427), (1, 60, 78, 428), (1, 60, 15, 431), (1, 60, 15, 456), (1, 60, 1, 501), (1, 60, 1, 503), (1, 60, 1, 506), (1, 60, 1, 508), (1, 60, 1, 509), (1, 60, 1, 510), (1, 60, 1, 511), (1, 60, 1, 514), (1, 60, 1, 515), (1, 60, 1, 516), (1, 60, 1, 518), (1, 60, 1, 522), (1, 60, 1, 523), (1, 60, 1, 524), (1, 60, 1, 527), (2, 60, 12, 38), (2, 60, 12, 39), (2, 60, 12, 40), (2, 60, 12, 41), (2, 60, 12, 42), (2, 60, 5, 45), (2, 60, 5, 46), (2, 60, 5, 47), (2, 60, 5, 48), (2, 60, 7, 60), (2, 60, 9, 61), (2, 60, 36, 62), (2, 60, 17, 63), (2, 60, 6, 65), (2, 60, 8, 67), (2, 60, 15, 69), (2, 60, 40, 70), (2, 60, 10, 71), (2, 60, 10, 72), (2, 60, 4, 74), (2, 60, 4, 75), (2, 60, 16, 76), (2, 60, 42, 77), (2, 60, 13, 78), (2, 60, 2, 79), (2, 60, 2, 80), (2, 60, 2, 81), (2, 60, 2, 82), (2, 60, 49, 87), (2, 60, 49, 88), (2, 60, 49, 89), (2, 60, 49, 90), (2, 60, 49, 91), (2, 60, 50, 103), (2, 60, 51, 106), (2, 60, 24, 158), (2, 60, 28, 186), (2, 60, 21, 192), (2, 60, 27, 205), (2, 60, 27, 206), (2, 60, 79, 214), (2, 60, 32, 218), (2, 60, 32, 219), (2, 60, 25, 224), (2, 60, 20, 244), (2, 60, 22, 251), (2, 60, 16, 276), (2, 60, 37, 278), (2, 60, 30, 283), (2, 60, 5, 284), (2, 60, 5, 286), (2, 60, 33, 291), (2, 60, 43, 304), (2, 60, 15, 319), (2, 60, 38, 320), (2, 60, 38, 321), (2, 60, 31, 327), (2, 60, 29, 341), (2, 60, 29, 342), (2, 60, 55, 351), (2, 60, 33, 354), (2, 60, 28, 356), (2, 60, 26, 363), (2, 60, 34, 370), (2, 60, 58, 412), (2, 60, 58, 413), (2, 60, 34, 416), (2, 60, 47, 419), (2, 60, 62, 420), (2, 60, 53, 421), (2, 60, 54, 423), (2, 60, 55, 424), (2, 60, 14, 425), (2, 60, 56, 426), (2, 60, 57, 427), (2, 60, 46, 428), (2, 60, 59, 431), (2, 60, 60, 456), (2, 60, 7, 501), (2, 60, 17, 503), (2, 60, 6, 506), (2, 60, 8, 508), (2, 60, 15, 509), (2, 60, 40, 510), (2, 60, 10, 511), (2, 60, 4, 514), (2, 60, 16, 515), (2, 60, 35, 516), (2, 60, 12, 518), (2, 60, 13, 522), (2, 60, 2, 523), (2, 60, 5, 524), (2, 60, 3, 527), (1, 60, 1, 1), (1, 60, 1, 2), (1, 60, 1, 3), (1, 60, 1, 4), (1, 60, 1, 5), (1, 60, 1, 6), (1, 60, 1, 7), (1, 60, 1, 8), (1, 60, 1, 9), (1, 60, 1, 10), (1, 60, 1, 11), (1, 60, 1, 12), (1, 60, 1, 13), (1, 60, 1, 14), (1, 60, 1, 15), (1, 60, 1, 16), (1, 60, 1, 17), (1, 60, 1, 18), (1, 60, 1, 19), (1, 60, 1, 20), (1, 60, 44, 23), (1, 60, 44, 24), (1, 60, 44, 25), (1, 60, 44, 26), (1, 60, 44, 27), (1, 60, 44, 28), (1, 60, 44, 29), (1, 60, 44, 30), (1, 60, 44, 31), (1, 60, 44, 32), (1, 60, 44, 33), (1, 60, 44, 34), (1, 60, 44, 35), (1, 60, 44, 36), (1, 60, 44, 37), (1, 60, 3, 50), (1, 60, 3, 51), (1, 60, 3, 52), (1, 60, 3, 53), (1, 60, 3, 54), (1, 60, 3, 55), (1, 60, 3, 56), (1, 60, 3, 57), (1, 60, 15, 58), (1, 60, 3, 59), (1, 60, 3, 64), (1, 60, 3, 66), (1, 60, 3, 68), (1, 60, 3, 73), (1, 60, 36, 84), (1, 60, 36, 85), (1, 60, 36, 86), (1, 60, 36, 92), (1, 60, 36, 93), (1, 60, 36, 94), (1, 60, 36, 95), (1, 60, 36, 96), (1, 60, 36, 97), (1, 60, 36, 98), (1, 60, 36, 99), (1, 60, 36, 100), (1, 60, 36, 101), (1, 60, 36, 102), (1, 60, 36, 104), (1, 60, 36, 105), (1, 60, 36, 107), (1, 60, 15, 108), (1, 60, 15, 110), (1, 60, 15, 111), (1, 60, 15, 112), (1, 60, 15, 113), (1, 60, 15, 114), (1, 60, 15, 115), (1, 60, 15, 116), (1, 60, 15, 118), (1, 60, 15, 119), (1, 60, 15, 120), (1, 60, 15, 121), (1, 60, 15, 122), (1, 60, 15, 123), (1, 60, 15, 124), (1, 60, 15, 125), (1, 60, 15, 126), (1, 60, 15, 127), (1, 60, 15, 128), (1, 60, 15, 129), (1, 60, 15, 130), (1, 60, 15, 131), (1, 60, 15, 132), (1, 60, 15, 133), (1, 60, 15, 134), (1, 60, 15, 135), (1, 60, 15, 136), (1, 60, 15, 137), (1, 60, 15, 138), (1, 60, 15, 139), (1, 60, 19, 140), (1, 60, 19, 141), (1, 60, 19, 142), (1, 60, 19, 143), (1, 60, 19, 144), (1, 60, 19, 145), (1, 60, 19, 146), (1, 60, 19, 147), (1, 60, 19, 148), (1, 60, 19, 149), (1, 60, 19, 150), (1, 60, 19, 151), (1, 60, 19, 152), (1, 60, 19, 153), (1, 60, 19, 154), (1, 60, 19, 155), (1, 60, 19, 156), (1, 60, 24, 157), (1, 60, 24, 159), (1, 60, 24, 160), (1, 60, 24, 161), (1, 60, 24, 162), (1, 60, 24, 163), (1, 60, 79, 164), (1, 60, 79, 165), (1, 60, 79, 166), (1, 60, 79, 167), (1, 60, 79, 168), (1, 60, 79, 169), (1, 60, 15, 170), (1, 60, 23, 171), (1, 60, 23, 172), (1, 60, 23, 173), (1, 60, 23, 174), (1, 60, 23, 175), (1, 60, 23, 176), (1, 60, 30, 177), (1, 60, 30, 178), (1, 60, 30, 179), (1, 60, 30, 180), (1, 60, 30, 181), (1, 60, 30, 182), (1, 60, 30, 183), (1, 60, 30, 184), (1, 60, 30, 185), (1, 60, 30, 187), (1, 60, 30, 188), (1, 60, 30, 189), (1, 60, 30, 190), (1, 60, 30, 191), (1, 60, 21, 193), (1, 60, 21, 194), (1, 60, 21, 195), (1, 60, 21, 196), (1, 60, 21, 197), (1, 60, 21, 198), (1, 60, 27, 199), (1, 60, 27, 200), (1, 60, 27, 201), (1, 60, 27, 202), (1, 60, 27, 203), (1, 60, 27, 204), (1, 60, 27, 207), (1, 60, 27, 208), (1, 60, 27, 209), (1, 60, 27, 210), (1, 60, 27, 211), (1, 60, 27, 212), (1, 60, 27, 213), (1, 60, 32, 215), (1, 60, 32, 216), (1, 60, 32, 217), (1, 60, 32, 220), (1, 60, 32, 222), (1, 60, 32, 223), (1, 60, 25, 225), (1, 60, 25, 226), (1, 60, 25, 227), (1, 60, 25, 228), (1, 60, 25, 229), (1, 60, 25, 230), (1, 60, 25, 231), (1, 60, 25, 232), (1, 60, 25, 233), (1, 60, 25, 234), (1, 60, 25, 235), (1, 60, 25, 236), (1, 60, 25, 237), (1, 60, 25, 238), (1, 60, 25, 239), (1, 60, 25, 240), (1, 60, 25, 241), (1, 60, 25, 242), (1, 60, 25, 243), (1, 60, 20, 245), (1, 60, 20, 246), (1, 60, 20, 247), (1, 60, 20, 248), (1, 60, 20, 249), (1, 60, 20, 250), (1, 60, 22, 252), (1, 60, 22, 253), (1, 60, 22, 254), (1, 60, 22, 255), (1, 60, 22, 256), (1, 60, 22, 257), (1, 60, 22, 258), (1, 60, 22, 259), (1, 60, 22, 260), (1, 60, 22, 261), (1, 60, 22, 262), (1, 60, 22, 263), (1, 60, 22, 264), (1, 60, 22, 265), (1, 60, 22, 266), (1, 60, 22, 267), (1, 60, 15, 268), (1, 60, 37, 269), (1, 60, 37, 270), (1, 60, 37, 271), (1, 60, 37, 272), (1, 60, 37, 273), (1, 60, 37, 274), (1, 60, 37, 275), (1, 60, 37, 279), (1, 60, 37, 280), (1, 60, 37, 281), (1, 60, 37, 282), (1, 60, 37, 285), (1, 60, 37, 287), (1, 60, 33, 288), (1, 60, 33, 289), (1, 60, 33, 290), (1, 60, 33, 292), (1, 60, 43, 293), (1, 60, 43, 294), (1, 60, 43, 295), (1, 60, 43, 296), (1, 60, 43, 297), (1, 60, 43, 298), (1, 60, 43, 299), (1, 60, 43, 300), (1, 60, 43, 301), (1, 60, 43, 302), (1, 60, 43, 303), (1, 60, 43, 305), (1, 60, 43, 306), (1, 60, 43, 307), (1, 60, 43, 308), (1, 60, 78, 309), (1, 60, 78, 310), (1, 60, 38, 311), (1, 60, 38, 312), (1, 60, 38, 313), (1, 60, 38, 314), (1, 60, 38, 315), (1, 60, 38, 316), (1, 60, 38, 317), (1, 60, 38, 318), (1, 60, 31, 322), (1, 60, 31, 323), (1, 60, 38, 324), (1, 60, 31, 325), (1, 60, 31, 326), (1, 60, 31, 328), (1, 60, 31, 329), (1, 60, 29, 330), (1, 60, 29, 331), (1, 60, 29, 332), (1, 60, 29, 333), (1, 60, 29, 334), (1, 60, 29, 335), (1, 60, 29, 336), (1, 60, 29, 337), (1, 60, 29, 338), (1, 60, 29, 339), (1, 60, 29, 340), (1, 60, 29, 343), (1, 60, 29, 344), (1, 60, 29, 345), (1, 60, 28, 347), (1, 60, 28, 348), (1, 60, 28, 349), (1, 60, 28, 350), (1, 60, 28, 352), (1, 60, 28, 353), (1, 60, 3, 357), (1, 60, 26, 358), (1, 60, 26, 359), (1, 60, 26, 360), (1, 60, 26, 361), (1, 60, 26, 362), (1, 60, 26, 364), (1, 60, 78, 377), (1, 60, 78, 378), (1, 60, 78, 379), (1, 60, 78, 380), (1, 60, 78, 381), (1, 60, 78, 382), (1, 60, 78, 383), (1, 60, 78, 384), (1, 60, 78, 385), (1, 60, 78, 386), (1, 60, 78, 387), (1, 60, 78, 388), (1, 60, 78, 389), (1, 60, 78, 390), (1, 60, 78, 391), (1, 60, 78, 392), (1, 60, 78, 393), (1, 60, 78, 394), (1, 60, 78, 395), (1, 60, 58, 409), (1, 60, 58, 410), (1, 60, 58, 411), (1, 60, 58, 414), (1, 60, 58, 415), (1, 60, 78, 417), (1, 60, 78, 418), (1, 60, 78, 422), (1, 60, 78, 434), (1, 60, 78, 435), (1, 60, 78, 436), (1, 60, 78, 437), (1, 60, 78, 438), (1, 60, 78, 439), (1, 60, 78, 440), (1, 60, 78, 441), (1, 60, 78, 442), (1, 60, 78, 443), (1, 60, 78, 444), (1, 60, 78, 445), (1, 60, 78, 446), (1, 60, 78, 447), (1, 60, 78, 448), (1, 60, 78, 449), (1, 60, 78, 450), (1, 60, 78, 451), (1, 60, 78, 452), (1, 60, 15, 464), (1, 60, 15, 465), (1, 60, 15, 466), (1, 60, 15, 467), (1, 60, 1, 500), (1, 60, 1, 502), (1, 60, 1, 504), (1, 60, 1, 505), (1, 60, 1, 507), (1, 60, 10, 512), (1, 60, 1, 517), (1, 60, 1, 519), (1, 60, 1, 520), (1, 60, 1, 525), (1, 60, 1, 526), (2, 15, 999999, 1), (2, 15, 999999, 2), (2, 15, 999999, 3), (2, 15, 999999, 4), (2, 15, 999999, 5), (2, 15, 999999, 6), (2, 15, 999999, 7), (2, 15, 999999, 8), (2, 15, 999999, 9), (2, 15, 999999, 10), (2, 15, 999999, 11), (2, 15, 999999, 12), (2, 15, 999999, 13), (2, 15, 999999, 14), (2, 15, 999999, 15), (2, 15, 999999, 16), (2, 15, 999999, 17), (2, 15, 999999, 18), (2, 15, 999999, 19), (2, 15, 999999, 20), (2, 15, 999999, 23), (2, 15, 999999, 24), (2, 15, 999999, 25), (2, 15, 999999, 26), (2, 15, 999999, 27), (2, 15, 999999, 28), (2, 15, 999999, 29), (2, 15, 999999, 30), (2, 15, 999999, 31), (2, 15, 999999, 32), (2, 15, 999999, 33), (2, 15, 999999, 34), (2, 15, 999999, 35), (2, 15, 999999, 36), (2, 15, 999999, 37), (2, 15, 999999, 50), (2, 15, 999999, 51), (2, 15, 999999, 52), (2, 15, 999999, 53), (2, 15, 999999, 54), (2, 15, 999999, 55), (2, 15, 999999, 56), (2, 15, 999999, 57), (2, 15, 999999, 58), (2, 15, 999999, 59), (2, 15, 999999, 64), (2, 15, 999999, 66), (2, 15, 999999, 68), (2, 15, 999999, 73), (2, 15, 999999, 84), (2, 15, 999999, 85), (2, 15, 999999, 86), (2, 15, 999999, 92), (2, 15, 999999, 93), (2, 15, 999999, 94), (2, 15, 999999, 95), (2, 15, 999999, 96), (2, 15, 999999, 97), (2, 15, 999999, 98), (2, 15, 999999, 99), (2, 15, 999999, 100), (2, 15, 999999, 101), (2, 15, 999999, 102), (2, 15, 999999, 104), (2, 15, 999999, 105), (2, 15, 999999, 107), (2, 15, 999999, 108), (2, 15, 999999, 110), (2, 15, 999999, 111), (2, 15, 999999, 112), (2, 15, 999999, 113), (2, 15, 999999, 114), (2, 15, 999999, 115), (2, 15, 999999, 116), (2, 15, 999999, 118), (2, 15, 999999, 119), (2, 15, 999999, 120), (2, 15, 999999, 121), (2, 15, 999999, 122), (2, 15, 999999, 123), (2, 15, 999999, 124), (2, 15, 999999, 125), (2, 15, 999999, 126), (2, 15, 999999, 127), (2, 15, 999999, 128), (2, 15, 999999, 129), (2, 15, 999999, 130), (2, 15, 999999, 131), (2, 15, 999999, 132), (2, 15, 999999, 133), (2, 15, 999999, 134), (2, 15, 999999, 135), (2, 15, 999999, 136), (2, 15, 999999, 137), (2, 15, 999999, 138), (2, 15, 999999, 139), (2, 15, 999999, 140), (2, 15, 999999, 141), (2, 15, 999999, 142), (2, 15, 999999, 143), (2, 15, 999999, 144), (2, 15, 999999, 145), (2, 15, 999999, 146), (2, 15, 999999, 147), (2, 15, 999999, 148), (2, 15, 999999, 149), (2, 15, 999999, 150), (2, 15, 999999, 151), (2, 15, 999999, 152), (2, 15, 999999, 153), (2, 15, 999999, 154), (2, 15, 999999, 155), (2, 15, 999999, 156), (2, 15, 999999, 157), (2, 15, 999999, 159), (2, 15, 999999, 160), (2, 15, 999999, 161), (2, 15, 999999, 162), (2, 15, 999999, 163), (2, 15, 999999, 164), (2, 15, 999999, 165), (2, 15, 999999, 166), (2, 15, 999999, 167), (2, 15, 999999, 168), (2, 15, 999999, 169), (2, 15, 999999, 170), (2, 15, 999999, 171), (2, 15, 999999, 172), (2, 15, 999999, 173), (2, 15, 999999, 174), (2, 15, 999999, 175), (2, 15, 999999, 176), (2, 15, 999999, 177), (2, 15, 999999, 178), (2, 15, 999999, 179), (2, 15, 999999, 180), (2, 15, 999999, 181), (2, 15, 999999, 182), (2, 15, 999999, 183), (2, 15, 999999, 184), (2, 15, 999999, 185), (2, 15, 999999, 187), (2, 15, 999999, 188), (2, 15, 999999, 189), (2, 15, 999999, 190), (2, 15, 999999, 191), (2, 15, 999999, 193), (2, 15, 999999, 194), (2, 15, 999999, 195), (2, 15, 999999, 196), (2, 15, 999999, 197), (2, 15, 999999, 198), (2, 15, 999999, 199), (2, 15, 999999, 200), (2, 15, 999999, 201), (2, 15, 999999, 202), (2, 15, 999999, 203), (2, 15, 999999, 204), (2, 15, 999999, 207), (2, 15, 999999, 208), (2, 15, 999999, 209), (2, 15, 999999, 210), (2, 15, 999999, 211), (2, 15, 999999, 212), (2, 15, 999999, 213), (2, 15, 999999, 215), (2, 15, 999999, 216), (2, 15, 999999, 217), (2, 15, 999999, 220), (2, 15, 999999, 222), (2, 15, 999999, 223), (2, 15, 999999, 225), (2, 15, 999999, 226), (2, 15, 999999, 227), (2, 15, 999999, 228), (2, 15, 999999, 229), (2, 15, 999999, 230), (2, 15, 999999, 231), (2, 15, 999999, 232), (2, 15, 999999, 233), (2, 15, 999999, 234), (2, 15, 999999, 235), (2, 15, 999999, 236), (2, 15, 999999, 237), (2, 15, 999999, 238), (2, 15, 999999, 239), (2, 15, 999999, 240), (2, 15, 999999, 241), (2, 15, 999999, 242), (2, 15, 999999, 243), (2, 15, 999999, 245), (2, 15, 999999, 246), (2, 15, 999999, 247), (2, 15, 999999, 248), (2, 15, 999999, 249), (2, 15, 999999, 250), (2, 15, 999999, 252), (2, 15, 999999, 253), (2, 15, 999999, 254), (2, 15, 999999, 255), (2, 15, 999999, 256), (2, 15, 999999, 257), (2, 15, 999999, 258), (2, 15, 999999, 259), (2, 15, 999999, 260), (2, 15, 999999, 261), (2, 15, 999999, 262), (2, 15, 999999, 263), (2, 15, 999999, 264), (2, 15, 999999, 265), (2, 15, 999999, 266), (2, 15, 999999, 267), (2, 15, 999999, 268), (2, 15, 999999, 269), (2, 15, 999999, 270), (2, 15, 999999, 271), (2, 15, 999999, 272), (2, 15, 999999, 273), (2, 15, 999999, 274), (2, 15, 999999, 275), (2, 15, 999999, 279), (2, 15, 999999, 280), (2, 15, 999999, 281), (2, 15, 999999, 282), (2, 15, 999999, 285), (2, 15, 999999, 287), (2, 15, 999999, 288), (2, 15, 999999, 289), (2, 15, 999999, 290), (2, 15, 999999, 292), (2, 15, 999999, 293), (2, 15, 999999, 294), (2, 15, 999999, 295), (2, 15, 999999, 296), (2, 15, 999999, 297), (2, 15, 999999, 298), (2, 15, 999999, 299), (2, 15, 999999, 300), (2, 15, 999999, 301), (2, 15, 999999, 302), (2, 15, 999999, 303), (2, 15, 999999, 305), (2, 15, 999999, 306), (2, 15, 999999, 307), (2, 15, 999999, 308), (2, 15, 999999, 309), (2, 15, 999999, 310), (2, 15, 999999, 311), (2, 15, 999999, 312), (2, 15, 999999, 313), (2, 15, 999999, 314), (2, 15, 999999, 315), (2, 15, 999999, 316), (2, 15, 999999, 317), (2, 15, 999999, 318), (2, 15, 999999, 322), (2, 15, 999999, 323), (2, 15, 999999, 324), (2, 15, 999999, 325), (2, 15, 999999, 326), (2, 15, 999999, 328), (2, 15, 999999, 329), (2, 15, 999999, 330), (2, 15, 999999, 331), (2, 15, 999999, 332), (2, 15, 999999, 333), (2, 15, 999999, 334), (2,\n" +
                "15, 999999, 335), (2, 15, 999999, 336), (2, 15, 999999, 337), (2, 15, 999999, 338), (2, 15, 999999, 339), (2, 15, 999999, 340), (2, 15, 999999, 343), (2, 15, 999999, 344), (2, 15, 999999, 345), (2, 15, 999999, 347), (2, 15, 999999, 348), (2, 15, 999999, 349), (2, 15, 999999, 350), (2, 15, 999999, 352), (2, 15, 999999, 353), (2, 15, 999999, 357), (2, 15, 999999, 358), (2, 15, 999999, 359), (2, 15, 999999, 360), (2, 15, 999999, 361), (2, 15, 999999, 362), (2, 15, 999999, 364), (2, 15, 999999, 377), (2, 15, 999999, 378), (2, 15, 999999, 379), (2, 15, 999999, 380), (2, 15, 999999, 381), (2, 15, 999999, 382), (2, 15, 999999, 383), (2, 15, 999999, 384), (2, 15, 999999, 385), (2, 15, 999999, 386), (2, 15, 999999, 387), (2, 15, 999999, 388), (2, 15, 999999, 389), (2, 15, 999999, 390), (2, 15, 999999, 391), (2, 15, 999999, 392), (2, 15, 999999, 393), (2, 15, 999999, 394), (2, 15, 999999, 395), (2, 15, 999999, 409), (2, 15, 999999, 410), (2, 15, 999999, 411), (2, 15, 999999, 414), (2, 15, 999999, 415), (2, 15, 999999, 417), (2, 15, 999999, 418), (2, 15, 999999, 422), (2, 15, 999999, 434), (2, 15, 999999, 435), (2, 15, 999999, 436), (2, 15, 999999, 437), (2, 15, 999999, 438), (2, 15, 999999, 439), (2, 15, 999999, 440), (2, 15, 999999, 441), (2, 15, 999999, 442), (2, 15, 999999, 443), (2, 15, 999999, 444), (2, 15, 999999, 445), (2, 15, 999999, 446), (2, 15, 999999, 447), (2, 15, 999999, 448), (2, 15, 999999, 449), (2, 15, 999999, 450), (2, 15, 999999, 451), (2, 15, 999999, 452), (2, 15, 999999, 464), (2, 15, 999999, 465), (2, 15, 999999, 466), (2, 15, 999999, 467), (2, 15, 999999, 500), (2, 15, 999999, 502), (2, 15, 999999, 504), (2, 15, 999999, 505), (2, 15, 999999, 507), (2, 15, 999999, 512), (2, 15, 999999, 517), (2, 15, 999999, 519), (2, 15, 999999, 520), (2, 15, 999999, 525), (2, 15, 999999, 526)");
        systemResourcesContainer.getConnection().commit();
        routePointsStatement.close();

        Statement distancesBetweenPoints = systemResourcesContainer.getConnection().createStatement();
        distancesBetweenPoints.execute("INSERT INTO distances_between_points (pointIDFirst, pointIDSecond, distance) VALUES (3, 7, 142), (3, 9, 769), (1, 36, 3439), (3, 17, 205), (3, 6, 267), (3, 8, 309), (3, 15, 1776), (3, 40, 1408), (3, 10, 353), (3, 4, 951), (3, 16, 775), (3, 42, 530), (3, 13, 1193), (3, 2, 419), (36, 49, 621), (36, 50, 454), (36, 51, 1101), (15, 24, 196), (30, 28, 159), (15, 21, 182), (15, 27, 345), (32, 79, 123), (15, 32, 463), (15, 25, 421), (15, 20, 362), (15, 22, 196), (37, 16, 440), (15, 37, 1054), (37, 30, 372), (37, 5, 460), (15, 33, 653), (15, 43, 846), (38, 15, 168), (15, 38, 168), (15, 31, 183), (15, 29, 889), (28, 55, 431), (28, 33, 346), (15, 28, 660), (15, 26, 272), (15, 34, 469), (78, 58, 429), (78, 34, 479), (78, 47, 293), (15, 62, 1365), (78, 53, 1118), (78, 54, 656), (78, 55, 1501), (78, 14, 1200), (15, 56, 1342), (78, 57, 1340), (78, 46, 200), (15, 59, 1074), (15, 60, 1743), (1, 7, 261), (1, 17, 100), (1, 6, 366), (1, 8, 531), (1, 15, 1797), (1, 40, 1326), (1, 10, 140), (1, 4, 946), (1, 16, 903), (1, 35, 795), (1, 12, 360), (1, 13, 1111), (1, 2, 328), (1, 5, 543), (1, 3, 206),(1, 999999, 100), (44, 999999, 100),  (3, 999999, 100), (36, 999999, 100),(19, 999999, 100), (24, 999999, 100), (79, 999999, 100), (23, 999999, 100), (30, 999999, 100), (21, 999999, 100), (27, 999999, 100), (32, 999999, 100), (25, 999999, 100), (20, 999999, 100), (22, 999999, 100), (15, 999999, 100), (37, 999999, 100), (33, 999999, 100), (43, 999999, 100), (78, 999999, 100), (38, 999999, 100), (31, 999999, 100), (29, 999999, 100), (28, 999999, 100),(26, 999999, 100), (58, 999999, 100), (10, 999999, 100);");
        systemResourcesContainer.getConnection().commit();
        distancesBetweenPoints.close();


    }
}
